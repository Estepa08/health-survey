import { loadQuestions } from './questions.js';
import { displayQuestion, updateQuestionCounter } from './display.js';
import { calculateScore } from './calculations.js';

// –ü—Ä–æ—Å—Ç–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
let currentQuestionIndex = 0;
let questions = [];
let userAnswers = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async function loadResultsConfig() {
  try {
    const response = await fetch('./results-config.json');
    if (!response.ok) throw new Error('Failed to load results config');
    return await response.json();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function showDetailedResults(score, level) {
  const recommendationsHTML = level.recommendations 
    ? level.recommendations.map(rec => `<li>${rec}</li>`).join('')
    : '';

  const resultsContainer = document.createElement('div');
  resultsContainer.className = 'results-container';
  resultsContainer.innerHTML = `
    <div class="results-card">
      <div class="results-header">
        <span class="emoji">${level.emoji}</span>
        <h2>${level.title}</h2>
      </div>
      
      <div class="score">${score} –±–∞–ª–ª–æ–≤</div>
      
      <div class="description">${level.description}</div>
      
      ${recommendationsHTML ? `
        <div class="recommendations">
          <h3>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h3>
          <ul>${recommendationsHTML}</ul>
        </div>
      ` : ''}
      
      ${level.warning ? `<div class="warning">${level.warning}</div>` : ''}
      ${level.note ? `<div class="note">${level.note}</div>` : ''}
      
      ${level.emergency ? `
        <div class="emergency">
          <h3>–°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å:</h3>
          <p>${level.emergency.service}: <strong>${level.emergency.phone}</strong></p>
          <p>${level.emergency.message}</p>
        </div>
      ` : ''}
      
      <button id="restart-btn" class="btn btn-primary">–ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ</button>
    </div>
  `;

  addResultsToPage(resultsContainer);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (fallback)
function showSimpleResults(score) {
  const resultsContainer = document.createElement('div');
  resultsContainer.className = 'results-container';
  resultsContainer.innerHTML = `
    <div class="results-card">
      <h2>–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω!</h2>
      <div class="score">${score} –±–∞–ª–ª–æ–≤</div>
      <button id="restart-btn" class="btn btn-primary">–ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ</button>
    </div>
  `;

  addResultsToPage(resultsContainer);
}

// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
function addResultsToPage(resultsContainer) {
  // –ü—Ä—è—á–µ–º –≤–æ–ø—Ä–æ—Å—ã
  const questionContainer = document.querySelector('.question-card');
  const navigation = document.querySelector('.navigation');

  if (questionContainer) questionContainer.style.display = 'none';
  if (navigation) navigation.style.display = 'none';

  // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const main = document.querySelector('main');
  if (main) {
    main.appendChild(resultsContainer);
  }

  // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ"
  const restartBtn = document.getElementById('restart-btn');
  if (restartBtn) {
    restartBtn.addEventListener('click', () => window.location.reload());
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async function showFinalResults() {
  const totalScore = calculateScore(userAnswers);
  const config = await loadResultsConfig();

  console.log('üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', totalScore, '–±–∞–ª–ª–æ–≤');

  // –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  if (!config) {
    showSimpleResults(totalScore);
    return;
  }

  // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —É—Ä–æ–≤–µ–Ω—å
  const level = config.levels.find(level => 
    totalScore >= level.minScore && totalScore <= level.maxScore
  );

  if (level) {
    showDetailedResults(totalScore, level);
  } else {
    showSimpleResults(totalScore);
  }
}

function handleAnswerSelection(questionIndex, answerValue) {
  userAnswers[questionIndex] = answerValue;
  updateNavigationButtons();
  console.log('–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', userAnswers);
}

function updateNavigationButtons() {
  const nextBtn = document.getElementById('next-btn');
  const prevBtn = document.getElementById('prev-btn');

  if (nextBtn) {
    const hasAnswer = userAnswers[currentQuestionIndex] !== undefined;
    nextBtn.disabled = !hasAnswer;

    // –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º –≤–æ–ø—Ä–æ—Å–µ
    if (currentQuestionIndex === questions.length - 1) {
      nextBtn.textContent = '–ó–∞–≤–µ—Ä—à–∏—Ç—å';
    } else {
      nextBtn.textContent = '–î–∞–ª–µ–µ';
    }
  }

  if (prevBtn) {
    prevBtn.disabled = currentQuestionIndex === 0;
  }
}

function goToNextQuestion() {
  if (currentQuestionIndex < questions.length - 1) {
    currentQuestionIndex++;
    displayQuestion(
      questions[currentQuestionIndex],
      currentQuestionIndex,
      handleAnswerSelection
    );
    updateQuestionCounter(currentQuestionIndex + 1, questions.length);
    updateNavigationButtons();
  } else {
    // –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    showFinalResults();
  }
}

function goToPrevQuestion() {
  if (currentQuestionIndex > 0) {
    currentQuestionIndex--;
    displayQuestion(
      questions[currentQuestionIndex],
      currentQuestionIndex,
      handleAnswerSelection
    );
    updateQuestionCounter(currentQuestionIndex + 1, questions.length);
    updateNavigationButtons();
  }
}

function initNavigation() {
  const nextBtn = document.getElementById('next-btn');
  const prevBtn = document.getElementById('prev-btn');

  if (nextBtn) {
    nextBtn.addEventListener('click', goToNextQuestion);
  }

  if (prevBtn) {
    prevBtn.addEventListener('click', goToPrevQuestion);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
export async function initQuestionnaire() {
  console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ä–æ—Å–Ω–∏–∫–∞...');

  questions = await loadQuestions();

  if (questions.length === 0) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã');
    return;
  }

  console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${questions.length} –≤–æ–ø—Ä–æ—Å–æ–≤`);

  initNavigation();
  updateQuestionCounter(1, questions.length);

  if (questions.length > 0) {
    displayQuestion(questions[0], 0, handleAnswerSelection);
    updateNavigationButtons();
  }
}